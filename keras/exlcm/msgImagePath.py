"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class msgImagePath(object):
    __slots__ = ["timestamp", "ImageNum", "ImagePath"]

    def __init__(self):
        self.timestamp = 0
        self.ImageNum = 0
        self.ImagePath = []

    def encode(self):
        buf = BytesIO()
        buf.write(msgImagePath._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qi", self.timestamp, self.ImageNum))
        for i0 in range(self.ImageNum):
            __ImagePath_encoded = self.ImagePath[i0].encode('utf-8')
            buf.write(struct.pack('>I', len(__ImagePath_encoded)+1))
            buf.write(__ImagePath_encoded)
            buf.write(b"\0")

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != msgImagePath._get_packed_fingerprint():
            raise ValueError("Decode error")
        return msgImagePath._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = msgImagePath()
        self.timestamp, self.ImageNum = struct.unpack(">qi", buf.read(12))
        self.ImagePath = []
        for i0 in range(self.ImageNum):
            __ImagePath_len = struct.unpack('>I', buf.read(4))[0]
            self.ImagePath.append(buf.read(__ImagePath_len)[:-1].decode('utf-8', 'replace'))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if msgImagePath in parents: return 0
        tmphash = (0x88f7875ca6b9e590) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if msgImagePath._packed_fingerprint is None:
            msgImagePath._packed_fingerprint = struct.pack(">Q", msgImagePath._get_hash_recursive([]))
        return msgImagePath._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

