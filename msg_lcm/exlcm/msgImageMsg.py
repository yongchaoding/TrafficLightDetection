"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class msgImageMsg(object):
    __slots__ = ["timestamp", "ImageNum", "ImageMsg"]

    def __init__(self):
        self.timestamp = 0
        self.ImageNum = 0
        self.ImageMsg = []

    def encode(self):
        buf = BytesIO()
        buf.write(msgImageMsg._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qi", self.timestamp, self.ImageNum))
        buf.write(struct.pack('>%di' % self.ImageNum, *self.ImageMsg[:self.ImageNum]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != msgImageMsg._get_packed_fingerprint():
            raise ValueError("Decode error")
        return msgImageMsg._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = msgImageMsg()
        self.timestamp, self.ImageNum = struct.unpack(">qi", buf.read(12))
        self.ImageMsg = struct.unpack('>%di' % self.ImageNum, buf.read(self.ImageNum * 4))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if msgImageMsg in parents: return 0
        tmphash = (0x1b76556462338f5c) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if msgImageMsg._packed_fingerprint is None:
            msgImageMsg._packed_fingerprint = struct.pack(">Q", msgImageMsg._get_hash_recursive([]))
        return msgImageMsg._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

